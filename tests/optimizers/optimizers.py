# Generated by CodiumAI
import pytest
from Bio.Seq import Seq

from mood.optimizers.genetic_algorithm import GeneticAlgorithm


class TestGeneticAlgorithm:

    # Initializing population with default parameters
    def test_init_population_default_params(self, mocker):
        mock_data = mocker.Mock()
        ga = GeneticAlgorithm(data=mock_data)
        sequences_initial = [Seq("ATGC")]
        ga.init_population(sequences_initial)
        assert mock_data.add_sequence.call_count > 0

    # Generating mutation sequences correctly
    def test_generate_mutation_sequence(self):
        ga = GeneticAlgorithm(mutable_positions=[1, 2], mutable_aa={1: "A", 2: "T"})
        sequence_to_mutate = "ATGC"
        mutated_seq, old_aa, new_aa = ga.generate_mutation_sequence(
            sequence_to_mutate, 1.0
        )
        assert mutated_seq != sequence_to_mutate
        assert old_aa and new_aa

    # Performing uniform crossOver correctly
    def test_uniform_crossOver(self):
        ga = GeneticAlgorithm(mutable_positions=[1, 2])
        sequence1 = Seq("ATGC")
        sequence2 = Seq("TACG")
        result = ga.uniform_crossOver(sequence1, sequence2)
        assert result != sequence1 and result != sequence2

    # Performing two-point crossOver correctly
    def test_two_point_crossOver(self):
        ga = GeneticAlgorithm(mutable_positions=[1, 2])
        sequence1 = Seq("ATGC")
        sequence2 = Seq("TACG")
        result = ga.two_point_crossOver(sequence1, sequence2)
        assert result != sequence1 and result != sequence2

    # Performing single-point crossOver correctly
    def test_single_point_crossOver(self):
        ga = GeneticAlgorithm(mutable_positions=[1, 2])
        sequence1 = Seq("ATGC")
        sequence2 = Seq("TACG")
        result = ga.single_point_crossOver(sequence1, sequence2)
        assert result != sequence1 and result != sequence2

    # Handling empty initial sequences list
    def test_empty_initial_sequences_list(self, mocker):
        mock_data = mocker.Mock()
        ga = GeneticAlgorithm(data=mock_data)
        sequences_initial = []
        ga.init_population(sequences_initial)
        assert mock_data.add_sequence.call_count == 0

    # Handling invalid crossOver type
    def test_invalid_crossOver_type(self):
        ga = GeneticAlgorithm()
        with pytest.raises(Exception) as excinfo:
            ga.generate_crossOver_sequence(Seq("ATGC"), Seq("TACG"), "invalid_type")
        assert "Invalid crossOver type" in str(excinfo.value)

    # Handling invalid mutation rate
    def test_invalid_mutation_rate(self):
        ga = GeneticAlgorithm()
        with pytest.raises(TypeError):
            ga.generate_mutation_sequence(Seq("ATGC"), "invalid_rate")

    # Handling invalid population size
    def test_invalid_population_size(self):
        with pytest.raises(ValueError):
            GeneticAlgorithm(population_size=-1)

    # Handling invalid mutable positions
    def test_invalid_mutable_positions(self):
        with pytest.raises(TypeError):
            GeneticAlgorithm(mutable_positions="invalid_positions")


if __name__ == "__main__":
    unittest.main()
